
import CoachSelectionView from "./CoachSelectionView";
import PendingRequestView from "./PendingRequestView";
import QuitPlanView from "./QuitPlanView";
import { useCoachSelection } from "../../../hook/useCoachSelection";
import { useUserSubscription } from "../../../hook/useUserSubscription";
import { FullPageErrorCard, FullPageLoadingSkeleton } from "../../common/QuitPlanComponents";
import SubscriptionUpgradeCard from "../../common/SubscriptionUpgradeCard";
import { Alert, Button, Card } from "antd";
import { UserOutlined, ClockCircleOutlined } from "@ant-design/icons";

// Component hi·ªÉn th·ªã khi user ƒë√£ c√≥ quit plan nh∆∞ng ch∆∞a c√≥ coach
const NoCoachSelectedView = ({ coaches, onSelectCoach, selectedCoach, onSubmit, onCancel }) => {
  return (
    <div className="min-h-screen text-slate-800 p-4 max-w-6xl mx-auto">
      <CoachSelectionView
        coaches={coaches}
        selectedCoach={selectedCoach}
        onSelectCoach={onSelectCoach}
        onSubmit={onSubmit}
        onCancel={onCancel}
      />
    </div>
  );
};

// Component hi·ªÉn th·ªã khi user ƒë√£ c√≥ quit plan v√† coach nh∆∞ng ch∆∞a c√≥ stages
const WaitingForStagesView = ({ userQuitPlan, onRefresh, isRefreshing }) => {
  return (
    <div className="min-h-screen text-slate-800 p-4 max-w-6xl mx-auto">
      <div className="mb-6">
        <Alert
          message="ƒêang ch·ªù hu·∫•n luy·ªán vi√™n thi·∫øt l·∫≠p k·∫ø ho·∫°ch"
          description="Hu·∫•n luy·ªán vi√™n c·ªßa b·∫°n ƒëang thi·∫øt l·∫≠p l·ªô tr√¨nh cai thu·ªëc c√° nh√¢n. Vui l√≤ng ch·ªù ƒë·ª£i trong khi ch√∫ng t√¥i chu·∫©n b·ªã k·∫ø ho·∫°ch ph√π h·ª£p v·ªõi b·∫°n."
          type="info"
          showIcon
          icon={<ClockCircleOutlined />}
        />
      </div>

      <Card className="border border-slate-200 rounded-2xl shadow-sm">
        <div className="text-center py-12">
          <div className="mb-6">
            <div className="inline-flex items-center justify-center w-24 h-24 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full mb-6 shadow-2xl">
              <ClockCircleOutlined className="text-4xl text-white" />
            </div>
          </div>

          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            ƒêang chu·∫©n b·ªã k·∫ø ho·∫°ch cai thu·ªëc
          </h2>
          
          <p className="text-gray-600 mb-6 max-w-md mx-auto">
            Hu·∫•n luy·ªán vi√™n <strong>{userQuitPlan?.coach_id?.name || "c·ªßa b·∫°n"}</strong> ƒëang thi·∫øt l·∫≠p l·ªô tr√¨nh cai thu·ªëc c√° nh√¢n d·ª±a tr√™n th√¥ng tin b·∫°n ƒë√£ cung c·∫•p.
          </p>

          <div className="bg-blue-50 p-4 rounded-lg border border-blue-200 mb-6">
            <p className="text-blue-800 text-sm">
              üí° <strong>L·ªùi khuy√™n:</strong> Trong khi ch·ªù ƒë·ª£i, b·∫°n c√≥ th·ªÉ:
            </p>
            <ul className="text-blue-700 text-sm mt-2 space-y-1">
              <li>‚Ä¢ ƒê·ªçc c√°c b√†i vi·∫øt v·ªÅ cai thu·ªëc</li>
              <li>‚Ä¢ Theo d√µi t√¨nh tr·∫°ng h√∫t thu·ªëc hi·ªán t·∫°i</li>
              <li>‚Ä¢ Xem c√°c th√†nh t·ª±u c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c</li>
            </ul>
          </div>

          <Button 
            type="primary" 
            size="large"
            onClick={onRefresh}
            loading={isRefreshing}
            icon={<ClockCircleOutlined />}
          >
            Ki·ªÉm tra c·∫≠p nh·∫≠t
          </Button>
        </div>
      </Card>
    </div>
  );
};

const CoachCardList = () => {
  const {
    selectedCoach,
    coaches,
    userQuitPlan,
    pendingRequest,
    quitPlanWithoutCoach,
    loading,
    error,
    isRefreshing,
    setSelectedCoach,
    handleSubmit,
    refreshData,
  } = useCoachSelection();

  // Ki·ªÉm tra g√≥i th√†nh vi√™n
  const {
    loading: subscriptionLoading,
    error: subscriptionError,
    canAccessCoach,
    isFreeUser,
  } = useUserSubscription();

  // Loading state - ∆∞u ti√™n loading subscription tr∆∞·ªõc
  if (subscriptionLoading || loading) {
    return <FullPageLoadingSkeleton text="ƒêang ki·ªÉm tra g√≥i th√†nh vi√™n..." />;
  }

  // Error state
  if (error && !subscriptionError) {
    return <FullPageErrorCard message="L·ªói t·∫£i d·ªØ li·ªáu" description={error} />;
  }

  // Ki·ªÉm tra quy·ªÅn truy c·∫≠p coach
  if (!canAccessCoach()) {
    const isUserFree = isFreeUser();

    return (
      <SubscriptionUpgradeCard
        title={
          isUserFree
            ? "Mua g√≥i Plus/Premium ƒë·ªÉ ch·ªçn hu·∫•n luy·ªán vi√™n"
            : "C·∫ßn n√¢ng c·∫•p g√≥i ƒë·ªÉ ch·ªçn hu·∫•n luy·ªán vi√™n"
        }
        description={
          isUserFree
            ? "B·∫°n ch∆∞a c√≥ g√≥i ƒëƒÉng k√Ω n√†o. Mua g√≥i Plus ho·∫∑c Premium ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi hu·∫•n luy·ªán vi√™n chuy√™n nghi·ªáp!"
            : "T√≠nh nƒÉng hu·∫•n luy·ªán vi√™n c√° nh√¢n ch·ªâ d√†nh cho th√†nh vi√™n Plus v√† Premium. N√¢ng c·∫•p ngay ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c s·ª± h·ªó tr·ª£ chuy√™n nghi·ªáp!"
        }
      />
    );
  }

  // Show pending request view if user has pending request
  if (pendingRequest?._id) {
    console.log('CoachCardList: Render PendingRequestView', pendingRequest);
    return (
      <PendingRequestView
        pendingRequest={pendingRequest}
        onRefresh={refreshData}
        isRefreshing={isRefreshing}
      />
    );
  }

  // Show quit plan view if user has approved plan with coach and stages
  if (userQuitPlan?._id && userQuitPlan?.coach_id) {
    console.log('CoachCardList: Render QuitPlanView', userQuitPlan);
    return <QuitPlanView userQuitPlan={userQuitPlan} />;
  }

  // Show waiting for stages view if user has quit plan and coach but no stages
  // This case should be handled by the hook, but we'll add it as a fallback
  if (quitPlanWithoutCoach?._id && quitPlanWithoutCoach?.coach_id) {
    console.log('CoachCardList: Render WaitingForStagesView', quitPlanWithoutCoach);
    return (
      <WaitingForStagesView
        userQuitPlan={quitPlanWithoutCoach}
        onRefresh={refreshData}
        isRefreshing={isRefreshing}
      />
    );
  }

  // Show no coach selected view if user has quit plan but no coach
  if (quitPlanWithoutCoach?._id) {
    console.log('CoachCardList: Render NoCoachSelectedView', quitPlanWithoutCoach);
    return (
      <NoCoachSelectedView
        coaches={coaches}
        selectedCoach={selectedCoach}
        onSelectCoach={setSelectedCoach}
        onSubmit={handleSubmit}
        onCancel={() => setSelectedCoach(null)}
      />
    );
  }

  // Show coach selection view for all other cases
  console.log('CoachCardList: Render CoachSelectionView', coaches);
  return (
    <CoachSelectionView
      coaches={coaches}
      selectedCoach={selectedCoach}
      onSelectCoach={setSelectedCoach}
      onSubmit={handleSubmit}
      onCancel={() => setSelectedCoach(null)}
    />
  );
};

export default CoachCardList;
