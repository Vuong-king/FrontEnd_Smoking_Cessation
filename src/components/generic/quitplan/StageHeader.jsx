import { Typography, Button,  message, Tag, Modal, Form, InputNumber, Input } from "antd";
import { ReloadOutlined, EditOutlined, CheckCircleFilled } from "@ant-design/icons";
import { useState } from "react";
import ProgressService from '../../../services/progressService';
import SmokingStatusService from '../../../services/SmokingStatusService';

const { Title, Paragraph } = Typography;

// Custom Toast Component
const CustomToast = ({ message, description, type, onClose }) => {
  return (
    <div 
      className={`fixed top-6 right-6 z-[9999] max-w-sm bg-white rounded-lg shadow-2xl border-l-4 ${
        type === 'success' ? 'border-green-500' : 'border-red-500'
      } transform transition-all duration-300 ease-out`}
      style={{
        animation: 'slideInRight 0.3s ease-out'
      }}
    >
      <div className="p-4">
        <div className="flex items-start">
          <div className={`flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center ${
            type === 'success' ? 'bg-green-100' : 'bg-red-100'
          }`}>
            {type === 'success' ? (
              <CheckCircleFilled className="text-green-600 text-sm" />
            ) : (
              <span className="text-red-600 text-sm">‚úï</span>
            )}
          </div>
          <div className="ml-3 flex-1">
            <p className={`text-sm font-medium ${
              type === 'success' ? 'text-green-800' : 'text-red-800'
            }`}>
              {message}
            </p>
            {description && (
              <p className="mt-1 text-sm text-gray-600">
                {description}
              </p>
            )}
          </div>
          <button
            onClick={onClose}
            className="ml-4 flex-shrink-0 text-gray-400 hover:text-gray-600"
          >
            ‚úï
          </button>
        </div>
      </div>
    </div>
  );
};

const StageHeader = ({
  currentStage,
  stageTasks,
  progress,
  completedCount,
  loading,
  onRefresh,
  onMoveToNextStage,
  showProgressButton = true, // m·∫∑c ƒë·ªãnh l√† hi·ªán
}) => {
  // Modal state
  const [modalOpen, setModalOpen] = useState(false);
  const [form] = Form.useForm();
  const [submitting, setSubmitting] = useState(false);
  const [toast, setToast] = useState(null);

  // Hi·ªÉn th·ªã custom toast
  const showToast = (message, description, type = 'success') => {
    setToast({ message, description, type });
    // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
    setTimeout(() => {
      setToast(null);
    }, 5000);
  };

  // Ki·ªÉm tra xem ƒë√£ h·∫øt ng√†y c·ªßa giai ƒëo·∫°n hi·ªán t·∫°i ch∆∞a
  const isStageEndDateReached = () => {
    if (!currentStage?.end_date) return false;
    const today = new Date();
    const endDate = new Date(currentStage.end_date);
    return today >= endDate;
  };

  // Ki·ªÉm tra xem c√≥ th·ªÉ chuy·ªÉn giai ƒëo·∫°n kh√¥ng
  const canMoveToNextStage = () => {
    return progress === 100 && isStageEndDateReached();
  };

  // L·∫•y th√¥ng b√°o l√Ω do kh√¥ng th·ªÉ chuy·ªÉn giai ƒëo·∫°n
  const getCannotMoveReason = () => {
    if (progress < 100) {
      return `B·∫°n c√≤n ${stageTasks.length - completedCount} nhi·ªám v·ª• ch∆∞a ho√†n th√†nh.`;
    }
    if (!isStageEndDateReached()) {
      const endDate = new Date(currentStage.end_date);
      return `B·∫°n ch·ªâ c√≥ th·ªÉ chuy·ªÉn giai ƒëo·∫°n sau ng√†y ${endDate.toLocaleDateString('vi-VN')}.`;
    }
    return "Kh√¥ng th·ªÉ chuy·ªÉn giai ƒëo·∫°n.";
  };

  // X·ª≠ l√Ω submit ti·∫øn tr√¨nh
  const handleProgressSubmit = async (values) => {
    if (!currentStage?._id) return;
    setSubmitting(true);
    try {
      // L·∫•y user_id t·ª´ localStorage
      const currentUser = JSON.parse(localStorage.getItem("user") || "{}");
      const userId = currentUser?.id;
      
      if (!userId) {
        showToast('‚ùå L·ªói', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!', 'error');
        return;
      }

      // L·∫•y smoking status t·ª´ API tr∆∞·ªõc
      let smokingStatus = null;
      try {
        const response = await SmokingStatusService.getStatus(userId);
        smokingStatus = response?.smokingStatus || response;
        console.log('Smoking status response:', response);
      } catch (error) {
        console.log('Kh√¥ng l·∫•y ƒë∆∞·ª£c smoking status:', error);
      }

      // T·∫°o progress data v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
      const progressData = {
        stage_id: currentStage._id,
        user_id: userId,
        date: new Date().toISOString().slice(0, 10),
        cigarettes_smoked: values.cigarettes,
        health_status: values.symptoms || '',
        // Th√™m th√¥ng tin smoking status n·∫øu c√≥
        ...(smokingStatus && {
          cigarettes_per_day: smokingStatus.cigarettes_per_day,
          cost_per_pack: smokingStatus.cost_per_pack,
          // B·ªè cigarettes_per_pack v√¨ kh√¥ng c√≥ trong backend schema
        })
      };

      console.log('G·ª≠i d·ªØ li·ªáu progress:', progressData);
      
      await ProgressService.createProgress(progressData);
      
      // Hi·ªÉn th·ªã custom toast notification
      showToast(
        '‚úÖ Ti·∫øn tr√¨nh ƒë√£ ƒë∆∞·ª£c nh·∫≠p trong ng√†y h√¥m nay',
        `B·∫°n ƒë√£ ghi nh·∫≠n ${values.cigarettes} ƒëi·∫øu thu·ªëc h√¥m nay. H√£y ti·∫øp t·ª•c duy tr√¨ ƒë·ªông l·ª±c v√† ki√™n tr√¨ v·ªõi m·ª•c ti√™u cai thu·ªëc!`,
        'success'
      );
      
      setModalOpen(false);
      form.resetFields();
      if (onRefresh) onRefresh();
    } catch (error) {
      console.error('L·ªói khi ghi nh·∫≠n ti·∫øn tr√¨nh:', error);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      showToast(
        '‚ùå L·ªói khi c·∫≠p nh·∫≠t ti·∫øn tr√¨nh',
        'Ti·∫øn tr√¨nh h√¥m nay ƒë√£ ƒë∆∞·ª£c nh·∫≠p Vui l√≤ng th·ª≠ l·∫°i sau.',
        'error'
      );
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <>
      {/* Custom Toast */}
      {toast && (
        <CustomToast
          message={toast.message}
          description={toast.description}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}

      <div className="mb-6">
        <div className="flex justify-between mb-4">
          <Title
            level={3}
            className="text-gray-800"
            ellipsis={{ rows: 2, tooltip: currentStage.title }}
          >
            {currentStage.title}
          </Title>
          <div className="flex gap-2">
            {showProgressButton && (
              <Button icon={<EditOutlined />} onClick={() => setModalOpen(true)}>
                Nh·∫≠p ti·∫øn tr√¨nh
              </Button>
            )}
            <Button icon={<ReloadOutlined />} onClick={onRefresh} loading={loading}>
              L√†m m·ªõi
            </Button>
            <Button
              type="primary"
              icon="üöÄ"
              onClick={
                canMoveToNextStage()
                  ? onMoveToNextStage
                  : () => {
                      message.warning(getCannotMoveReason(), 4);
                    }
              }
              disabled={!canMoveToNextStage()}
              loading={loading}
            >
              Chuy·ªÉn giai ƒëo·∫°n ti·∫øp theo
            </Button>
          </div>
        </div>
        {/* Modal nh·∫≠p ti·∫øn tr√¨nh */}
        <Modal
          title="Nh·∫≠p ti·∫øn tr√¨nh cho giai ƒëo·∫°n n√†y"
          open={modalOpen}
          onCancel={() => setModalOpen(false)}
          onOk={() => form.submit()}
          okText="L∆∞u"
          cancelText="H·ªßy"
          confirmLoading={submitting}
        >
          <Form
            form={form}
            layout="vertical"
            onFinish={handleProgressSubmit}
          >
            <Form.Item
              name="cigarettes"
              label="S·ªë ƒëi·∫øu thu·ªëc ƒë√£ h√∫t h√¥m nay"
              rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·∫øu thu·ªëc!' }]}
            >
              <InputNumber min={0} max={100} className="w-full" placeholder="V√≠ d·ª•: 5" />
            </Form.Item>
            <Form.Item name="symptoms" label="Tri·ªáu ch·ª©ng/Ghi ch√∫">
              <Input.TextArea rows={3} placeholder="Nh·∫≠p c·∫£m nh·∫≠n, tri·ªáu ch·ª©ng..." maxLength={300} showCount />
            </Form.Item>
          </Form>
        </Modal>
        {/* Th√¥ng tin gi·ªõi h·∫°n v√† s·ªë l·∫ßn th·ª≠ */}
        <div className="bg-blue-50 p-4 rounded-lg border mb-4">
          <div className="flex flex-wrap gap-4 items-center">
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium text-blue-800">Gi·ªõi h·∫°n thu·ªëc l√°:</span>
              {currentStage.cigarette_limit ? (
                <Tag color="red" className="font-medium">{currentStage.cigarette_limit} ƒëi·∫øu</Tag>
              ) : (
                <Tag color="orange">Kh√¥ng gi·ªõi h·∫°n</Tag>
              )}
            </div>
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium text-blue-800">L·∫ßn th·ª≠ th·ª©:</span>
              <Tag color="blue" className="font-medium">L·∫ßn {currentStage.attempt_number || 1}</Tag>
            </div>
            {currentStage.end_date && (
              <div className="flex items-center gap-2">
                <span className="text-sm font-medium text-blue-800">Ng√†y k·∫øt th√∫c:</span>
                <Tag color={isStageEndDateReached() ? "green" : "orange"} className="font-medium">
                  {new Date(currentStage.end_date).toLocaleDateString('vi-VN')}
                </Tag>
              </div>
            )}
          </div>
        </div>
        
        {currentStage.description && (
          <div className="bg-gray-50 p-4 rounded-lg border mb-4">
            <Paragraph
              ellipsis={{ rows: 3, expandable: true, symbol: "Xem th√™m" }}
            >
              {currentStage.description}
            </Paragraph>
          </div>
        )}
      </div>
    </>
  );
};

export default StageHeader;
